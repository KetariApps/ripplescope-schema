# Types
type User {
  # DETAILS
  email: String! @unique
  displayName: String @unique
  familyName: String
  givenName: String
  private: Boolean! @default(value: true)

  # RELATIONSHIPS
  interactions: [Interactable!]!
    @relationship(
      type: "INTERACTS_WITH"
      properties: "UserInteractsWith"
      direction: OUT
    )

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

type OrganizationStatus {
  name: OrganizationStatusName! @unique
  organizations: [Organization!]!
    @relationship(
      type: "HAS"
      properties: "OrganizationHasStatus"
      direction: IN
    )

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

type Organization {
  name: String!
  website: String! @unique
  brief: String
  description: String

  # RELATIONSHIPS
  considerations: [OrganizationConsideration!]!
    @relationship(type: "HAS", direction: OUT)
  ripples: [Ripple!]!
    @relationship(
      type: "CREATES"
      properties: "OrganizationCreates"
      direction: OUT
    )
  statuses: [OrganizationStatus!]!
    @relationship(
      type: "HAS"
      properties: "OrganizationHasStatus"
      direction: OUT
    )
  scopes: [Scope!]!
    @relationship(
      type: "TOUCHES"
      properties: "OrganizationTouchesScope"
      direction: OUT
    )
  users: [User!]!
    @relationship(
      type: "INTERACTS_WITH"
      properties: "UserInteractsWith"
      direction: IN
    )
  problems: [Problem!]! @relationship(type: "SOLVING", direction: OUT)
  solutions: [Solution!]! @relationship(type: "PROPOSES", direction: OUT)

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

type Ripple {
  # DETAILS
  name: String
  brief: String!
  description: String

  # RELATIONSHIPS
  organization: Organization!
    @relationship(
      type: "CREATES"
      properties: "OrganizationCreates"
      direction: IN
    )
  scopes: [Scope!]!
    @relationship(type: "IN", properties: "RippleIn", direction: OUT)
  users: [User!]!
    @relationship(
      type: "INTERACTS_WITH"
      properties: "UserInteractsWith"
      direction: IN
    )

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

type Scope {
  # DETAILS
  name: String! @unique
  brief: String!
  description: String
  basis: String

  # RELATIONSHIPS
  considerations: [ScopeConsideration!]!
    @relationship(type: "HAS", direction: OUT)
  scopes: [Scope!]! @relationship(type: "REFINES", direction: OUT)
  ripples: [Ripple!]!
    @relationship(type: "IN", properties: "RippleIn", direction: IN)
  organizations: [Organization!]!
    @relationship(
      type: "TOUCHES"
      properties: "OrganizationTouchesScope"
      direction: IN
    )
  users: [User!]!
    @relationship(
      type: "INTERACTS_WITH"
      properties: "UserInteractsWith"
      direction: IN
    )
  stakeholders: [Stakeholder!]! @relationship(type: "HAS", direction: OUT)

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

# Consideration types

type Misc @node(labels: ["Misc", "Consideration"]) {
  # DETAILS
  content: String!

  # RELATIONSHIPS
  organization: Organization! @relationship(type: "HAS", direction: IN)
  users: [User!]!
    @relationship(
      type: "INTERACTS_WITH"
      properties: "UserInteractsWith"
      direction: IN
    )

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

type Question @node(labels: ["Question", "Consideration"]) {
  # DETAILS
  brief: String!
  description: String

  # RELATIONSHIPS
  scope: Scope! @relationship(type: "HAS", direction: IN)
  users: [User!]!
    @relationship(
      type: "INTERACTS_WITH"
      properties: "UserInteractsWith"
      direction: IN
    )

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

type Example @node(labels: ["Example", "Consideration"]) {
  # DETAILS
  name: String
  brief: String!
  description: String

  # RELATIONSHIPS
  scopes: [Scope!]! @relationship(type: "HAS", direction: IN)
  users: [User!]!
    @relationship(
      type: "INTERACTS_WITH"
      properties: "UserInteractsWith"
      direction: IN
    )

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

type WebDump @node(labels: ["WebDump", "Consideration"]) {
  # DETAILS
  content: String!

  # RELATIONSHIPS
  organization: Organization! @relationship(type: "HAS", direction: IN)
  users: [User!]!
    @relationship(
      type: "INTERACTS_WITH"
      properties: "UserInteractsWith"
      direction: IN
    )

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

type Geographic @node(labels: ["Geographic", "Consideration"]) {
  # DETAILS
  brief: String
  description: String

  # RELATIONSHIPS
  organization: Organization! @relationship(type: "HAS", direction: IN)
  users: [User!]!
    @relationship(
      type: "INTERACTS_WITH"
      properties: "UserInteractsWith"
      direction: IN
    )

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

type Team @node(labels: ["Team", "Consideration"]) {
  # DETAILS
  brief: String
  description: String

  # RELATIONSHIPS
  organization: Organization! @relationship(type: "HAS", direction: IN)
  users: [User!]!
    @relationship(
      type: "INTERACTS_WITH"
      properties: "UserInteractsWith"
      direction: IN
    )

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

type Stakeholder {
  # DETAILS
  name: String! @unique
  brief: String!
  description: String

  # RELATIONSHIPS
  organizations: [Organization!]! @relationship(type: "HAS", direction: IN)
  scopes: [Scope!]! @relationship(type: "HAS", direction: IN)
  problems: [Problem!]! @relationship(type: "HAS", direction: IN)
  users: [User!]!
    @relationship(
      type: "INTERACTS_WITH"
      properties: "UserInteractsWith"
      direction: IN
    )

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

type Problem {
  # DETAILS
  brief: String
  description: String

  # RELATIONSHIPS
  organization: [Organization!]! @relationship(type: "SOLVING", direction: IN)
  solutions: [Solution!]!
    @relationship(type: "TO", properties: "ProblemSolution", direction: IN)
  stakeholders: [Stakeholder!]!
    @relationship(type: "HAS", properties: "StakeholderProblem", direction: IN)
  users: [User!]!
    @relationship(
      type: "INTERACTS_WITH"
      properties: "UserInteractsWith"
      direction: IN
    )

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

type Solution {
  # DETAILS
  brief: String
  description: String

  # RELATIONSHIPS
  organization: [Organization!]! @relationship(type: "PROPOSES", direction: IN)
  problems: [Problem!]!
    @relationship(type: "TO", properties: "ProblemSolution", direction: OUT)
  users: [User!]!
    @relationship(
      type: "INTERACTS_WITH"
      properties: "UserInteractsWith"
      direction: IN
    )

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

# Interfaces
interface OrganizationTouchesScope @relationshipProperties {
  aspect: String!
  reason: String!
  processId: String!

  # DEFAULT FIELDS
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

interface OrganizationHasStatus @relationshipProperties {
  message: String
  dump: String
  processId: String!

  # DEFAULT FIELDS
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

interface UserInteractsWith @relationshipProperties {
  type: UserInteractionName!
  message: String
  dump: String

  # DEFAULT FIELDS
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

interface RippleIn @relationshipProperties {
  # DETAILS
  magnitude: Float!
  sentiment: RipplesSentiment!
  processId: String!

  # DEFAULT FIELDS
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

interface OrganizationCreates @relationshipProperties {
  # DETAILS
  aspect: String!
  reason: String!
  processId: String!

  # DEFAULT FIELDS
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

interface StakeholderProblem @relationshipProperties {
  # DETAILS
  severity: Float

  # DEFAULT FIELDS
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

interface ProblemSolution @relationshipProperties {
  # DETAILS
  effectiveness: Float

  # DEFAULT FIELDS
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
}

# Unions
union Interactable =
    User
  | OrganizationStatus
  | Organization
  | Ripple
  | Scope
  | Question
  | Example
  | Stakeholder
  | WebDump
  | Geographic
  | Team
  | Problem
  | Solution

union OrganizationConsideration = WebDump | Geographic | Team | Misc

union ScopeConsideration = Question | Example

# Enums
enum RipplesSentiment {
  POSITIVE
  NEGATIVE
}

enum OrganizationStatusName {
  RIPPLE_CHAIN_LOCATIONS_INFERRING
  RIPPLE_CHAIN_ORGANIZATION_DESCRIBING
  RIPPLE_CHAIN_LOCATIONS_CONNECTED
  RIPPLE_CHAIN_SCOPES_INFERRING
  RIPPLE_CHAIN_SCOPES_CONNECTED
  RIPPLE_CHAIN_RIPPLES_INFERRING
  RIPPLE_CHAIN_RIPPLES_CONNECTED
  RIPPLE_CHAIN_DONE
  RIPPLE_CHAIN_ERROR
  VERIFICATION_BEGAN
  VERIFICATION_DONE
  VERIFICATION_ERROR
}

"""
Names for the interactions a user may have.
"""
enum UserInteractionName {
  CREATE
  READ
  UPDATE
  DELETE
  OWNERSHIP
  TRUST
  # Determine additional, specific actions?
  # Should user interaction types be limited based on what they're interacting with?
  # For example, a user can't begin verification on a non-verifiable entity.
  # This would mean, also, that entities define the interactions they're allowed to have on their relationship properties with a user.
}

enum NationCode {
  AFG # Afghanistan
  ALA # Aland Islands
  ALB # Albania
  DZA # Algeria
  ASM # American Samoa
  AND # Andorra
  AGO # Angola
  AIA # Anguilla
  ATA # Antarctica
  ATG # Antigua and Barbuda
  ARG # Argentina
  ARM # Armenia
  ABW # Aruba
  AUS # Australia
  AUT # Austria
  AZE # Azerbaijan
  BHS # Bahamas
  BHR # Bahrain
  BGD # Bangladesh
  BRB # Barbados
  BLR # Belarus
  BEL # Belgium
  BLZ # Belize
  BEN # Benin
  BMU # Bermuda
  BTN # Bhutan
  BOL # Bolivia
  BIH # Bosnia and Herzegovina
  BWA # Botswana
  BVT # Bouvet Island
  BRA # Brazil
  VGB # British Virgin Islands
  IOT # British Indian Ocean Territory
  BRN # Brunei Darussalam
  BGR # Bulgaria
  BFA # Burkina Faso
  BDI # Burundi
  KHM # Cambodia
  CMR # Cameroon
  CAN # Canada
  CPV # Cape Verde
  CYM # Cayman Islands
  CAF # Central African Republic
  TCD # Chad
  CHL # Chile
  CHN # China
  HKG # Hong Kong, SAR China
  MAC # Macao, SAR China
  CXR # Christmas Island
  CCK # Cocos (Keeling) Islands
  COL # Colombia
  COM # Comoros
  COG # Congo (Brazzaville)
  COD # Congo, (Kinshasa)
  COK # Cook Islands
  CRI # Costa Rica
  CIV # Côte d'Ivoire
  HRV # Croatia
  CUB # Cuba
  CYP # Cyprus
  CZE # Czech Republic
  DNK # Denmark
  DJI # Djibouti
  DMA # Dominica
  DOM # Dominican Republic
  ECU # Ecuador
  EGY # Egypt
  SLV # El Salvador
  GNQ # Equatorial Guinea
  ERI # Eritrea
  EST # Estonia
  ETH # Ethiopia
  FLK # Falkland Islands (Malvinas)
  FRO # Faroe Islands
  FJI # Fiji
  FIN # Finland
  FRA # France
  GUF # French Guiana
  PYF # French Polynesia
  ATF # French Southern Territories
  GAB # Gabon
  GMB # Gambia
  GEO # Georgia
  DEU # Germany
  GHA # Ghana
  GIB # Gibraltar
  GRC # Greece
  GRL # Greenland
  GRD # Grenada
  GLP # Guadeloupe
  GUM # Guam
  GTM # Guatemala
  GGY # Guernsey
  GIN # Guinea
  GNB # Guinea-Bissau
  GUY # Guyana
  HTI # Haiti
  HMD # Heard and Mcdonald Islands
  VAT # Holy See (Vatican City State)
  HND # Honduras
  HUN # Hungary
  ISL # Iceland
  IND # India
  IDN # Indonesia
  IRN # Iran, Islamic Republic of
  IRQ # Iraq
  IRL # Ireland
  IMN # Isle of Man
  ISR # Israel
  ITA # Italy
  JM # Jamaica
  JPN # Japan
  JEY # Jersey
  JOR # Jordan
  KAZ # Kazakhstan
  KEN # Kenya
  KIR # Kiribati
  PRK # Korea (North)
  KOR # Korea (South)
  KWT # Kuwait
  KGZ # Kyrgyzstan
  LAO # Lao PDR
  LVA # Latvia
  LBN # Lebanon
  LSO # Lesotho
  LBR # Liberia
  LBY # Libya
  LIE # Liechtenstein
  LTU # Lithuania
  LUX # Luxembourg
  MKD # Macedonia, Republic of
  MDG # Madagascar
  MWI # Malawi
  MYS # Malaysia
  MDV # Maldives
  MLI # Mali
  MLT # Malta
  MHL # Marshall Islands
  MTQ # Martinique
  MRT # Mauritania
  MUS # Mauritius
  MYT # Mayotte
  MEX # Mexico
  FSM # Micronesia, Federated States of
  MDA # Moldova
  MCO # Monaco
  MNG # Mongolia
  MNE # Montenegro
  MSR # Montserrat
  MAR # Morocco
  MOZ # Mozambique
  MMR # Myanmar
  NAM # Namibia
  NRU # Nauru
  NPL # Nepal
  NLD # Netherlands
  ANT # Netherlands Antilles
  NCL # New Caledonia
  NZL # New Zealand
  NIC # Nicaragua
  NER # Niger
  NGA # Nigeria
  NIU # Niue
  NFK # Norfolk Island
  MNP # Northern Mariana Islands
  NOR # Norway
  OMN # Oman
  PAK # Pakistan
  PLW # Palau
  PSE # Palestinian Territory
  PAN # Panama
  PNG # Papua New Guinea
  PRY # Paraguay
  PER # Peru
  PHL # Philippines
  PCN # Pitcairn
  POL # Poland
  PRT # Portugal
  PRI # Puerto Rico
  QAT # Qatar
  REU # Réunion
  ROU # Romania
  RUS # Russian Federation
  RWA # Rwanda
  BLM # Saint-Barthélemy
  SHN # Saint Helena
  KNA # Saint Kitts and Nevis
  LCA # Saint Lucia
  MAF # Saint-Martin (French part)
  SPM # Saint Pierre and Miquelon
  VCT # Saint Vincent and Grenadines
  WSM # Samoa
  SMR # San Marino
  STP # Sao Tome and Principe
  SAU # Saudi Arabia
  SEN # Senegal
  SRB # Serbia
  SYC # Seychelles
  SLE # Sierra Leone
  SGP # Singapore
  SVK # Slovakia
  SVN # Slovenia
  SLB # Solomon Islands
  SOM # Somalia
  ZAF # South Africa
  SGS # South Georgia and the South Sandwich Islands
  SSD # South Sudan
  ESP # Spain
  LKA # Sri Lanka
  SDN # Sudan
  SUR # Suriname
  SJM # Svalbard and Jan Mayen Islands
  SWZ # Swaziland
  SWE # Sweden
  CHE # Switzerland
  SYR # Syrian Arab Republic (Syria)
  TWN # Taiwan, Republic of China
  TJK # Tajikistan
  TZA # Tanzania, United Republic of
  THA # Thailand
  TLS # Timor-Leste
  TGO # Togo
  TKL # Tokelau
  TON # Tonga
  TTO # Trinidad and Tobago
  TUN # Tunisia
  TUR # Turkey
  TKM # Turkmenistan
  TCA # Turks and Caicos Islands
  TUV # Tuvalu
  UGA # Uganda
  UKR # Ukraine
  ARE # United Arab Emirates
  GBR # United Kingdom
  USA # United States of America
  UMI # US Minor Outlying Islands
  URY # Uruguay
  UZB # Uzbekistan
  VUT # Vanuatu
  VEN # Venezuela (Bolivarian Republic)
  VNM # Viet Nam
  VIR # Virgin Islands, US
  WLF # Wallis and Futuna Islands
  ESH # Western Sahara
  YEM # Yemen
  ZMB # Zambia
  ZWE # Zimbabwe
}
